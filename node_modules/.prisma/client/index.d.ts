
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type accountPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "account"
  objects: {
    botaccount: botaccountPayload<ExtArgs>[]
    chaturl: chaturlPayload<ExtArgs>[]
    message: messagePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    email: string
    password: string
    firstName: string
    lastName: string
  }, ExtArgs["result"]["account"]>
  composites: {}
}

/**
 * Model account
 * 
 */
export type account = runtime.Types.DefaultSelection<accountPayload>
export type botaccountPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "botaccount"
  objects: {
    account: accountPayload<ExtArgs> | null
    message: messagePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    email: string
    password: string
    name: string
    cookies: Prisma.JsonValue | null
    account_id: number | null
  }, ExtArgs["result"]["botaccount"]>
  composites: {}
}

/**
 * Model botaccount
 * 
 */
export type botaccount = runtime.Types.DefaultSelection<botaccountPayload>
export type chaturlPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "chaturl"
  objects: {
    account: accountPayload<ExtArgs> | null
    message: messagePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string | null
    account_id: number | null
  }, ExtArgs["result"]["chaturl"]>
  composites: {}
}

/**
 * Model chaturl
 * 
 */
export type chaturl = runtime.Types.DefaultSelection<chaturlPayload>
export type messagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "message"
  objects: {
    botaccount: botaccountPayload<ExtArgs> | null
    chaturl: chaturlPayload<ExtArgs> | null
    account: accountPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    title: string | null
    content: string
    timestamp: Date
    repeating: string
    sent: boolean
    account_id: number | null
    bot_account_id: number
    chaturl_id: number | null
  }, ExtArgs["result"]["message"]>
  composites: {}
}

/**
 * Model message
 * 
 */
export type message = runtime.Types.DefaultSelection<messagePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.account`: Exposes CRUD operations for the **account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.accountDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.botaccount`: Exposes CRUD operations for the **botaccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Botaccounts
    * const botaccounts = await prisma.botaccount.findMany()
    * ```
    */
  get botaccount(): Prisma.botaccountDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.chaturl`: Exposes CRUD operations for the **chaturl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chaturls
    * const chaturls = await prisma.chaturl.findMany()
    * ```
    */
  get chaturl(): Prisma.chaturlDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.messageDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    account: 'account',
    botaccount: 'botaccount',
    chaturl: 'chaturl',
    message: 'message'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'account' | 'botaccount' | 'chaturl' | 'message'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      account: {
        payload: accountPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.accountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.accountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accountPayload>
          }
          findFirst: {
            args: Prisma.accountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.accountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accountPayload>
          }
          findMany: {
            args: Prisma.accountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accountPayload>[]
          }
          create: {
            args: Prisma.accountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accountPayload>
          }
          createMany: {
            args: Prisma.accountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.accountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accountPayload>
          }
          update: {
            args: Prisma.accountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accountPayload>
          }
          deleteMany: {
            args: Prisma.accountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.accountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.accountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<accountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.accountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      botaccount: {
        payload: botaccountPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.botaccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<botaccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.botaccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<botaccountPayload>
          }
          findFirst: {
            args: Prisma.botaccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<botaccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.botaccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<botaccountPayload>
          }
          findMany: {
            args: Prisma.botaccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<botaccountPayload>[]
          }
          create: {
            args: Prisma.botaccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<botaccountPayload>
          }
          createMany: {
            args: Prisma.botaccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.botaccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<botaccountPayload>
          }
          update: {
            args: Prisma.botaccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<botaccountPayload>
          }
          deleteMany: {
            args: Prisma.botaccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.botaccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.botaccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<botaccountPayload>
          }
          aggregate: {
            args: Prisma.BotaccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBotaccount>
          }
          groupBy: {
            args: Prisma.BotaccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BotaccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.botaccountCountArgs<ExtArgs>,
            result: $Utils.Optional<BotaccountCountAggregateOutputType> | number
          }
        }
      }
      chaturl: {
        payload: chaturlPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.chaturlFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<chaturlPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.chaturlFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<chaturlPayload>
          }
          findFirst: {
            args: Prisma.chaturlFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<chaturlPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.chaturlFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<chaturlPayload>
          }
          findMany: {
            args: Prisma.chaturlFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<chaturlPayload>[]
          }
          create: {
            args: Prisma.chaturlCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<chaturlPayload>
          }
          createMany: {
            args: Prisma.chaturlCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.chaturlDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<chaturlPayload>
          }
          update: {
            args: Prisma.chaturlUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<chaturlPayload>
          }
          deleteMany: {
            args: Prisma.chaturlDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.chaturlUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.chaturlUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<chaturlPayload>
          }
          aggregate: {
            args: Prisma.ChaturlAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChaturl>
          }
          groupBy: {
            args: Prisma.ChaturlGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChaturlGroupByOutputType>[]
          }
          count: {
            args: Prisma.chaturlCountArgs<ExtArgs>,
            result: $Utils.Optional<ChaturlCountAggregateOutputType> | number
          }
        }
      }
      message: {
        payload: messagePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.messageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.messageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagePayload>
          }
          findFirst: {
            args: Prisma.messageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.messageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagePayload>
          }
          findMany: {
            args: Prisma.messageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagePayload>[]
          }
          create: {
            args: Prisma.messageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagePayload>
          }
          createMany: {
            args: Prisma.messageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.messageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagePayload>
          }
          update: {
            args: Prisma.messageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagePayload>
          }
          deleteMany: {
            args: Prisma.messageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.messageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.messageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<messagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.messageCountArgs<ExtArgs>,
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AccountCountOutputType
   */


  export type AccountCountOutputType = {
    botaccount: number
    chaturl: number
    message: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    botaccount?: boolean
    chaturl?: boolean
    message?: boolean
  }

  // Custom InputTypes

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type BotaccountCountOutputType
   */


  export type BotaccountCountOutputType = {
    message: number
  }

  export type BotaccountCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    message?: boolean
  }

  // Custom InputTypes

  /**
   * BotaccountCountOutputType without action
   */
  export type BotaccountCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BotaccountCountOutputType
     */
    select?: BotaccountCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type ChaturlCountOutputType
   */


  export type ChaturlCountOutputType = {
    message: number
  }

  export type ChaturlCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    message?: boolean
  }

  // Custom InputTypes

  /**
   * ChaturlCountOutputType without action
   */
  export type ChaturlCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChaturlCountOutputType
     */
    select?: ChaturlCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Models
   */

  /**
   * Model account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which account to aggregate.
     */
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     */
    orderBy?: Enumerable<accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: accountWhereInput
    orderBy?: Enumerable<accountOrderByWithAggregationInput>
    by: AccountScalarFieldEnum[]
    having?: accountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: number
    email: string
    password: string
    firstName: string
    lastName: string
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type accountSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    botaccount?: boolean | account$botaccountArgs<ExtArgs>
    chaturl?: boolean | account$chaturlArgs<ExtArgs>
    message?: boolean | account$messageArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type accountSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
  }

  export type accountInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    botaccount?: boolean | account$botaccountArgs<ExtArgs>
    chaturl?: boolean | account$chaturlArgs<ExtArgs>
    message?: boolean | account$messageArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeArgs<ExtArgs>
  }


  type accountGetPayload<S extends boolean | null | undefined | accountArgs> = $Types.GetResult<accountPayload, S>

  type accountCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<accountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface accountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['account'], meta: { name: 'account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {accountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends accountFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, accountFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'account'> extends True ? Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {accountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends accountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, accountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends accountFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, accountFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'account'> extends True ? Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends accountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, accountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends accountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, accountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<accountPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Account.
     * @param {accountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends accountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, accountCreateArgs<ExtArgs>>
    ): Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {accountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends accountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, accountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {accountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends accountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, accountDeleteArgs<ExtArgs>>
    ): Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {accountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends accountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, accountUpdateArgs<ExtArgs>>
    ): Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {accountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends accountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, accountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends accountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, accountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {accountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends accountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, accountUpsertArgs<ExtArgs>>
    ): Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {accountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends accountCountArgs>(
      args?: Subset<T, accountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__accountClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    botaccount<T extends account$botaccountArgs<ExtArgs> = {}>(args?: Subset<T, account$botaccountArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'findMany', never>| Null>;

    chaturl<T extends account$chaturlArgs<ExtArgs> = {}>(args?: Subset<T, account$chaturlArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'findMany', never>| Null>;

    message<T extends account$messageArgs<ExtArgs> = {}>(args?: Subset<T, account$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<messagePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * account base type for findUnique actions
   */
  export type accountFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which account to fetch.
     */
    where: accountWhereUniqueInput
  }

  /**
   * account findUnique
   */
  export interface accountFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends accountFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * account findUniqueOrThrow
   */
  export type accountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which account to fetch.
     */
    where: accountWhereUniqueInput
  }


  /**
   * account base type for findFirst actions
   */
  export type accountFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which account to fetch.
     */
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     */
    orderBy?: Enumerable<accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for accounts.
     */
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * account findFirst
   */
  export interface accountFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends accountFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * account findFirstOrThrow
   */
  export type accountFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which account to fetch.
     */
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     */
    orderBy?: Enumerable<accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for accounts.
     */
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * account findMany
   */
  export type accountFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter, which accounts to fetch.
     */
    where?: accountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of accounts to fetch.
     */
    orderBy?: Enumerable<accountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing accounts.
     */
    cursor?: accountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` accounts.
     */
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * account create
   */
  export type accountCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * The data needed to create a account.
     */
    data: XOR<accountCreateInput, accountUncheckedCreateInput>
  }


  /**
   * account createMany
   */
  export type accountCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many accounts.
     */
    data: Enumerable<accountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * account update
   */
  export type accountUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * The data needed to update a account.
     */
    data: XOR<accountUpdateInput, accountUncheckedUpdateInput>
    /**
     * Choose, which account to update.
     */
    where: accountWhereUniqueInput
  }


  /**
   * account updateMany
   */
  export type accountUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update accounts.
     */
    data: XOR<accountUpdateManyMutationInput, accountUncheckedUpdateManyInput>
    /**
     * Filter which accounts to update
     */
    where?: accountWhereInput
  }


  /**
   * account upsert
   */
  export type accountUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * The filter to search for the account to update in case it exists.
     */
    where: accountWhereUniqueInput
    /**
     * In case the account found by the `where` argument doesn't exist, create a new account with this data.
     */
    create: XOR<accountCreateInput, accountUncheckedCreateInput>
    /**
     * In case the account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<accountUpdateInput, accountUncheckedUpdateInput>
  }


  /**
   * account delete
   */
  export type accountDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
    /**
     * Filter which account to delete.
     */
    where: accountWhereUniqueInput
  }


  /**
   * account deleteMany
   */
  export type accountDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which accounts to delete
     */
    where?: accountWhereInput
  }


  /**
   * account.botaccount
   */
  export type account$botaccountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    where?: botaccountWhereInput
    orderBy?: Enumerable<botaccountOrderByWithRelationInput>
    cursor?: botaccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BotaccountScalarFieldEnum>
  }


  /**
   * account.chaturl
   */
  export type account$chaturlArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    where?: chaturlWhereInput
    orderBy?: Enumerable<chaturlOrderByWithRelationInput>
    cursor?: chaturlWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChaturlScalarFieldEnum>
  }


  /**
   * account.message
   */
  export type account$messageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * account without action
   */
  export type accountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the account
     */
    select?: accountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: accountInclude<ExtArgs> | null
  }



  /**
   * Model botaccount
   */


  export type AggregateBotaccount = {
    _count: BotaccountCountAggregateOutputType | null
    _avg: BotaccountAvgAggregateOutputType | null
    _sum: BotaccountSumAggregateOutputType | null
    _min: BotaccountMinAggregateOutputType | null
    _max: BotaccountMaxAggregateOutputType | null
  }

  export type BotaccountAvgAggregateOutputType = {
    id: number | null
    account_id: number | null
  }

  export type BotaccountSumAggregateOutputType = {
    id: number | null
    account_id: number | null
  }

  export type BotaccountMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    account_id: number | null
  }

  export type BotaccountMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    account_id: number | null
  }

  export type BotaccountCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    cookies: number
    account_id: number
    _all: number
  }


  export type BotaccountAvgAggregateInputType = {
    id?: true
    account_id?: true
  }

  export type BotaccountSumAggregateInputType = {
    id?: true
    account_id?: true
  }

  export type BotaccountMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    account_id?: true
  }

  export type BotaccountMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    account_id?: true
  }

  export type BotaccountCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    cookies?: true
    account_id?: true
    _all?: true
  }

  export type BotaccountAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which botaccount to aggregate.
     */
    where?: botaccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of botaccounts to fetch.
     */
    orderBy?: Enumerable<botaccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: botaccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` botaccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` botaccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned botaccounts
    **/
    _count?: true | BotaccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BotaccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BotaccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BotaccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BotaccountMaxAggregateInputType
  }

  export type GetBotaccountAggregateType<T extends BotaccountAggregateArgs> = {
        [P in keyof T & keyof AggregateBotaccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBotaccount[P]>
      : GetScalarType<T[P], AggregateBotaccount[P]>
  }




  export type BotaccountGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: botaccountWhereInput
    orderBy?: Enumerable<botaccountOrderByWithAggregationInput>
    by: BotaccountScalarFieldEnum[]
    having?: botaccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BotaccountCountAggregateInputType | true
    _avg?: BotaccountAvgAggregateInputType
    _sum?: BotaccountSumAggregateInputType
    _min?: BotaccountMinAggregateInputType
    _max?: BotaccountMaxAggregateInputType
  }


  export type BotaccountGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string
    cookies: JsonValue | null
    account_id: number | null
    _count: BotaccountCountAggregateOutputType | null
    _avg: BotaccountAvgAggregateOutputType | null
    _sum: BotaccountSumAggregateOutputType | null
    _min: BotaccountMinAggregateOutputType | null
    _max: BotaccountMaxAggregateOutputType | null
  }

  type GetBotaccountGroupByPayload<T extends BotaccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BotaccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BotaccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BotaccountGroupByOutputType[P]>
            : GetScalarType<T[P], BotaccountGroupByOutputType[P]>
        }
      >
    >


  export type botaccountSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    cookies?: boolean
    account_id?: boolean
    account?: boolean | accountArgs<ExtArgs>
    message?: boolean | botaccount$messageArgs<ExtArgs>
    _count?: boolean | BotaccountCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["botaccount"]>

  export type botaccountSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    cookies?: boolean
    account_id?: boolean
  }

  export type botaccountInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    account?: boolean | accountArgs<ExtArgs>
    message?: boolean | botaccount$messageArgs<ExtArgs>
    _count?: boolean | BotaccountCountOutputTypeArgs<ExtArgs>
  }


  type botaccountGetPayload<S extends boolean | null | undefined | botaccountArgs> = $Types.GetResult<botaccountPayload, S>

  type botaccountCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<botaccountFindManyArgs, 'select' | 'include'> & {
      select?: BotaccountCountAggregateInputType | true
    }

  export interface botaccountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['botaccount'], meta: { name: 'botaccount' } }
    /**
     * Find zero or one Botaccount that matches the filter.
     * @param {botaccountFindUniqueArgs} args - Arguments to find a Botaccount
     * @example
     * // Get one Botaccount
     * const botaccount = await prisma.botaccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends botaccountFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, botaccountFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'botaccount'> extends True ? Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Botaccount that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {botaccountFindUniqueOrThrowArgs} args - Arguments to find a Botaccount
     * @example
     * // Get one Botaccount
     * const botaccount = await prisma.botaccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends botaccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, botaccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Botaccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {botaccountFindFirstArgs} args - Arguments to find a Botaccount
     * @example
     * // Get one Botaccount
     * const botaccount = await prisma.botaccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends botaccountFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, botaccountFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'botaccount'> extends True ? Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Botaccount that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {botaccountFindFirstOrThrowArgs} args - Arguments to find a Botaccount
     * @example
     * // Get one Botaccount
     * const botaccount = await prisma.botaccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends botaccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, botaccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Botaccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {botaccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Botaccounts
     * const botaccounts = await prisma.botaccount.findMany()
     * 
     * // Get first 10 Botaccounts
     * const botaccounts = await prisma.botaccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const botaccountWithIdOnly = await prisma.botaccount.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends botaccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, botaccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Botaccount.
     * @param {botaccountCreateArgs} args - Arguments to create a Botaccount.
     * @example
     * // Create one Botaccount
     * const Botaccount = await prisma.botaccount.create({
     *   data: {
     *     // ... data to create a Botaccount
     *   }
     * })
     * 
    **/
    create<T extends botaccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, botaccountCreateArgs<ExtArgs>>
    ): Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Botaccounts.
     *     @param {botaccountCreateManyArgs} args - Arguments to create many Botaccounts.
     *     @example
     *     // Create many Botaccounts
     *     const botaccount = await prisma.botaccount.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends botaccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, botaccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Botaccount.
     * @param {botaccountDeleteArgs} args - Arguments to delete one Botaccount.
     * @example
     * // Delete one Botaccount
     * const Botaccount = await prisma.botaccount.delete({
     *   where: {
     *     // ... filter to delete one Botaccount
     *   }
     * })
     * 
    **/
    delete<T extends botaccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, botaccountDeleteArgs<ExtArgs>>
    ): Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Botaccount.
     * @param {botaccountUpdateArgs} args - Arguments to update one Botaccount.
     * @example
     * // Update one Botaccount
     * const botaccount = await prisma.botaccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends botaccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, botaccountUpdateArgs<ExtArgs>>
    ): Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Botaccounts.
     * @param {botaccountDeleteManyArgs} args - Arguments to filter Botaccounts to delete.
     * @example
     * // Delete a few Botaccounts
     * const { count } = await prisma.botaccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends botaccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, botaccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Botaccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {botaccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Botaccounts
     * const botaccount = await prisma.botaccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends botaccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, botaccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Botaccount.
     * @param {botaccountUpsertArgs} args - Arguments to update or create a Botaccount.
     * @example
     * // Update or create a Botaccount
     * const botaccount = await prisma.botaccount.upsert({
     *   create: {
     *     // ... data to create a Botaccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Botaccount we want to update
     *   }
     * })
    **/
    upsert<T extends botaccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, botaccountUpsertArgs<ExtArgs>>
    ): Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Botaccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {botaccountCountArgs} args - Arguments to filter Botaccounts to count.
     * @example
     * // Count the number of Botaccounts
     * const count = await prisma.botaccount.count({
     *   where: {
     *     // ... the filter for the Botaccounts we want to count
     *   }
     * })
    **/
    count<T extends botaccountCountArgs>(
      args?: Subset<T, botaccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BotaccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Botaccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotaccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BotaccountAggregateArgs>(args: Subset<T, BotaccountAggregateArgs>): Prisma.PrismaPromise<GetBotaccountAggregateType<T>>

    /**
     * Group by Botaccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotaccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BotaccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BotaccountGroupByArgs['orderBy'] }
        : { orderBy?: BotaccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BotaccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBotaccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for botaccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__botaccountClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    account<T extends accountArgs<ExtArgs> = {}>(args?: Subset<T, accountArgs<ExtArgs>>): Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    message<T extends botaccount$messageArgs<ExtArgs> = {}>(args?: Subset<T, botaccount$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<messagePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * botaccount base type for findUnique actions
   */
  export type botaccountFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    /**
     * Filter, which botaccount to fetch.
     */
    where: botaccountWhereUniqueInput
  }

  /**
   * botaccount findUnique
   */
  export interface botaccountFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends botaccountFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * botaccount findUniqueOrThrow
   */
  export type botaccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    /**
     * Filter, which botaccount to fetch.
     */
    where: botaccountWhereUniqueInput
  }


  /**
   * botaccount base type for findFirst actions
   */
  export type botaccountFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    /**
     * Filter, which botaccount to fetch.
     */
    where?: botaccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of botaccounts to fetch.
     */
    orderBy?: Enumerable<botaccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for botaccounts.
     */
    cursor?: botaccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` botaccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` botaccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of botaccounts.
     */
    distinct?: Enumerable<BotaccountScalarFieldEnum>
  }

  /**
   * botaccount findFirst
   */
  export interface botaccountFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends botaccountFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * botaccount findFirstOrThrow
   */
  export type botaccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    /**
     * Filter, which botaccount to fetch.
     */
    where?: botaccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of botaccounts to fetch.
     */
    orderBy?: Enumerable<botaccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for botaccounts.
     */
    cursor?: botaccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` botaccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` botaccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of botaccounts.
     */
    distinct?: Enumerable<BotaccountScalarFieldEnum>
  }


  /**
   * botaccount findMany
   */
  export type botaccountFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    /**
     * Filter, which botaccounts to fetch.
     */
    where?: botaccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of botaccounts to fetch.
     */
    orderBy?: Enumerable<botaccountOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing botaccounts.
     */
    cursor?: botaccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` botaccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` botaccounts.
     */
    skip?: number
    distinct?: Enumerable<BotaccountScalarFieldEnum>
  }


  /**
   * botaccount create
   */
  export type botaccountCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    /**
     * The data needed to create a botaccount.
     */
    data: XOR<botaccountCreateInput, botaccountUncheckedCreateInput>
  }


  /**
   * botaccount createMany
   */
  export type botaccountCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many botaccounts.
     */
    data: Enumerable<botaccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * botaccount update
   */
  export type botaccountUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    /**
     * The data needed to update a botaccount.
     */
    data: XOR<botaccountUpdateInput, botaccountUncheckedUpdateInput>
    /**
     * Choose, which botaccount to update.
     */
    where: botaccountWhereUniqueInput
  }


  /**
   * botaccount updateMany
   */
  export type botaccountUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update botaccounts.
     */
    data: XOR<botaccountUpdateManyMutationInput, botaccountUncheckedUpdateManyInput>
    /**
     * Filter which botaccounts to update
     */
    where?: botaccountWhereInput
  }


  /**
   * botaccount upsert
   */
  export type botaccountUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    /**
     * The filter to search for the botaccount to update in case it exists.
     */
    where: botaccountWhereUniqueInput
    /**
     * In case the botaccount found by the `where` argument doesn't exist, create a new botaccount with this data.
     */
    create: XOR<botaccountCreateInput, botaccountUncheckedCreateInput>
    /**
     * In case the botaccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<botaccountUpdateInput, botaccountUncheckedUpdateInput>
  }


  /**
   * botaccount delete
   */
  export type botaccountDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
    /**
     * Filter which botaccount to delete.
     */
    where: botaccountWhereUniqueInput
  }


  /**
   * botaccount deleteMany
   */
  export type botaccountDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which botaccounts to delete
     */
    where?: botaccountWhereInput
  }


  /**
   * botaccount.message
   */
  export type botaccount$messageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * botaccount without action
   */
  export type botaccountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the botaccount
     */
    select?: botaccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: botaccountInclude<ExtArgs> | null
  }



  /**
   * Model chaturl
   */


  export type AggregateChaturl = {
    _count: ChaturlCountAggregateOutputType | null
    _avg: ChaturlAvgAggregateOutputType | null
    _sum: ChaturlSumAggregateOutputType | null
    _min: ChaturlMinAggregateOutputType | null
    _max: ChaturlMaxAggregateOutputType | null
  }

  export type ChaturlAvgAggregateOutputType = {
    id: number | null
    account_id: number | null
  }

  export type ChaturlSumAggregateOutputType = {
    id: number | null
    account_id: number | null
  }

  export type ChaturlMinAggregateOutputType = {
    id: number | null
    name: string | null
    account_id: number | null
  }

  export type ChaturlMaxAggregateOutputType = {
    id: number | null
    name: string | null
    account_id: number | null
  }

  export type ChaturlCountAggregateOutputType = {
    id: number
    name: number
    account_id: number
    _all: number
  }


  export type ChaturlAvgAggregateInputType = {
    id?: true
    account_id?: true
  }

  export type ChaturlSumAggregateInputType = {
    id?: true
    account_id?: true
  }

  export type ChaturlMinAggregateInputType = {
    id?: true
    name?: true
    account_id?: true
  }

  export type ChaturlMaxAggregateInputType = {
    id?: true
    name?: true
    account_id?: true
  }

  export type ChaturlCountAggregateInputType = {
    id?: true
    name?: true
    account_id?: true
    _all?: true
  }

  export type ChaturlAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which chaturl to aggregate.
     */
    where?: chaturlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chaturls to fetch.
     */
    orderBy?: Enumerable<chaturlOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: chaturlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chaturls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chaturls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chaturls
    **/
    _count?: true | ChaturlCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChaturlAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChaturlSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChaturlMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChaturlMaxAggregateInputType
  }

  export type GetChaturlAggregateType<T extends ChaturlAggregateArgs> = {
        [P in keyof T & keyof AggregateChaturl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChaturl[P]>
      : GetScalarType<T[P], AggregateChaturl[P]>
  }




  export type ChaturlGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: chaturlWhereInput
    orderBy?: Enumerable<chaturlOrderByWithAggregationInput>
    by: ChaturlScalarFieldEnum[]
    having?: chaturlScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChaturlCountAggregateInputType | true
    _avg?: ChaturlAvgAggregateInputType
    _sum?: ChaturlSumAggregateInputType
    _min?: ChaturlMinAggregateInputType
    _max?: ChaturlMaxAggregateInputType
  }


  export type ChaturlGroupByOutputType = {
    id: number
    name: string | null
    account_id: number | null
    _count: ChaturlCountAggregateOutputType | null
    _avg: ChaturlAvgAggregateOutputType | null
    _sum: ChaturlSumAggregateOutputType | null
    _min: ChaturlMinAggregateOutputType | null
    _max: ChaturlMaxAggregateOutputType | null
  }

  type GetChaturlGroupByPayload<T extends ChaturlGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChaturlGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChaturlGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChaturlGroupByOutputType[P]>
            : GetScalarType<T[P], ChaturlGroupByOutputType[P]>
        }
      >
    >


  export type chaturlSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    account_id?: boolean
    account?: boolean | accountArgs<ExtArgs>
    message?: boolean | chaturl$messageArgs<ExtArgs>
    _count?: boolean | ChaturlCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["chaturl"]>

  export type chaturlSelectScalar = {
    id?: boolean
    name?: boolean
    account_id?: boolean
  }

  export type chaturlInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    account?: boolean | accountArgs<ExtArgs>
    message?: boolean | chaturl$messageArgs<ExtArgs>
    _count?: boolean | ChaturlCountOutputTypeArgs<ExtArgs>
  }


  type chaturlGetPayload<S extends boolean | null | undefined | chaturlArgs> = $Types.GetResult<chaturlPayload, S>

  type chaturlCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<chaturlFindManyArgs, 'select' | 'include'> & {
      select?: ChaturlCountAggregateInputType | true
    }

  export interface chaturlDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['chaturl'], meta: { name: 'chaturl' } }
    /**
     * Find zero or one Chaturl that matches the filter.
     * @param {chaturlFindUniqueArgs} args - Arguments to find a Chaturl
     * @example
     * // Get one Chaturl
     * const chaturl = await prisma.chaturl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends chaturlFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, chaturlFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'chaturl'> extends True ? Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Chaturl that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {chaturlFindUniqueOrThrowArgs} args - Arguments to find a Chaturl
     * @example
     * // Get one Chaturl
     * const chaturl = await prisma.chaturl.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends chaturlFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, chaturlFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Chaturl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaturlFindFirstArgs} args - Arguments to find a Chaturl
     * @example
     * // Get one Chaturl
     * const chaturl = await prisma.chaturl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends chaturlFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, chaturlFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'chaturl'> extends True ? Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Chaturl that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaturlFindFirstOrThrowArgs} args - Arguments to find a Chaturl
     * @example
     * // Get one Chaturl
     * const chaturl = await prisma.chaturl.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends chaturlFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, chaturlFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Chaturls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaturlFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chaturls
     * const chaturls = await prisma.chaturl.findMany()
     * 
     * // Get first 10 Chaturls
     * const chaturls = await prisma.chaturl.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chaturlWithIdOnly = await prisma.chaturl.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends chaturlFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, chaturlFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Chaturl.
     * @param {chaturlCreateArgs} args - Arguments to create a Chaturl.
     * @example
     * // Create one Chaturl
     * const Chaturl = await prisma.chaturl.create({
     *   data: {
     *     // ... data to create a Chaturl
     *   }
     * })
     * 
    **/
    create<T extends chaturlCreateArgs<ExtArgs>>(
      args: SelectSubset<T, chaturlCreateArgs<ExtArgs>>
    ): Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Chaturls.
     *     @param {chaturlCreateManyArgs} args - Arguments to create many Chaturls.
     *     @example
     *     // Create many Chaturls
     *     const chaturl = await prisma.chaturl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends chaturlCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, chaturlCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chaturl.
     * @param {chaturlDeleteArgs} args - Arguments to delete one Chaturl.
     * @example
     * // Delete one Chaturl
     * const Chaturl = await prisma.chaturl.delete({
     *   where: {
     *     // ... filter to delete one Chaturl
     *   }
     * })
     * 
    **/
    delete<T extends chaturlDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, chaturlDeleteArgs<ExtArgs>>
    ): Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Chaturl.
     * @param {chaturlUpdateArgs} args - Arguments to update one Chaturl.
     * @example
     * // Update one Chaturl
     * const chaturl = await prisma.chaturl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends chaturlUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, chaturlUpdateArgs<ExtArgs>>
    ): Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Chaturls.
     * @param {chaturlDeleteManyArgs} args - Arguments to filter Chaturls to delete.
     * @example
     * // Delete a few Chaturls
     * const { count } = await prisma.chaturl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends chaturlDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, chaturlDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chaturls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaturlUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chaturls
     * const chaturl = await prisma.chaturl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends chaturlUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, chaturlUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chaturl.
     * @param {chaturlUpsertArgs} args - Arguments to update or create a Chaturl.
     * @example
     * // Update or create a Chaturl
     * const chaturl = await prisma.chaturl.upsert({
     *   create: {
     *     // ... data to create a Chaturl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chaturl we want to update
     *   }
     * })
    **/
    upsert<T extends chaturlUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, chaturlUpsertArgs<ExtArgs>>
    ): Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Chaturls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chaturlCountArgs} args - Arguments to filter Chaturls to count.
     * @example
     * // Count the number of Chaturls
     * const count = await prisma.chaturl.count({
     *   where: {
     *     // ... the filter for the Chaturls we want to count
     *   }
     * })
    **/
    count<T extends chaturlCountArgs>(
      args?: Subset<T, chaturlCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChaturlCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chaturl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChaturlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChaturlAggregateArgs>(args: Subset<T, ChaturlAggregateArgs>): Prisma.PrismaPromise<GetChaturlAggregateType<T>>

    /**
     * Group by Chaturl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChaturlGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChaturlGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChaturlGroupByArgs['orderBy'] }
        : { orderBy?: ChaturlGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChaturlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChaturlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for chaturl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__chaturlClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    account<T extends accountArgs<ExtArgs> = {}>(args?: Subset<T, accountArgs<ExtArgs>>): Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    message<T extends chaturl$messageArgs<ExtArgs> = {}>(args?: Subset<T, chaturl$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<messagePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * chaturl base type for findUnique actions
   */
  export type chaturlFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    /**
     * Filter, which chaturl to fetch.
     */
    where: chaturlWhereUniqueInput
  }

  /**
   * chaturl findUnique
   */
  export interface chaturlFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends chaturlFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chaturl findUniqueOrThrow
   */
  export type chaturlFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    /**
     * Filter, which chaturl to fetch.
     */
    where: chaturlWhereUniqueInput
  }


  /**
   * chaturl base type for findFirst actions
   */
  export type chaturlFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    /**
     * Filter, which chaturl to fetch.
     */
    where?: chaturlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chaturls to fetch.
     */
    orderBy?: Enumerable<chaturlOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chaturls.
     */
    cursor?: chaturlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chaturls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chaturls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chaturls.
     */
    distinct?: Enumerable<ChaturlScalarFieldEnum>
  }

  /**
   * chaturl findFirst
   */
  export interface chaturlFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends chaturlFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * chaturl findFirstOrThrow
   */
  export type chaturlFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    /**
     * Filter, which chaturl to fetch.
     */
    where?: chaturlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chaturls to fetch.
     */
    orderBy?: Enumerable<chaturlOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chaturls.
     */
    cursor?: chaturlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chaturls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chaturls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chaturls.
     */
    distinct?: Enumerable<ChaturlScalarFieldEnum>
  }


  /**
   * chaturl findMany
   */
  export type chaturlFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    /**
     * Filter, which chaturls to fetch.
     */
    where?: chaturlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chaturls to fetch.
     */
    orderBy?: Enumerable<chaturlOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chaturls.
     */
    cursor?: chaturlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chaturls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chaturls.
     */
    skip?: number
    distinct?: Enumerable<ChaturlScalarFieldEnum>
  }


  /**
   * chaturl create
   */
  export type chaturlCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    /**
     * The data needed to create a chaturl.
     */
    data: XOR<chaturlCreateInput, chaturlUncheckedCreateInput>
  }


  /**
   * chaturl createMany
   */
  export type chaturlCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many chaturls.
     */
    data: Enumerable<chaturlCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * chaturl update
   */
  export type chaturlUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    /**
     * The data needed to update a chaturl.
     */
    data: XOR<chaturlUpdateInput, chaturlUncheckedUpdateInput>
    /**
     * Choose, which chaturl to update.
     */
    where: chaturlWhereUniqueInput
  }


  /**
   * chaturl updateMany
   */
  export type chaturlUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update chaturls.
     */
    data: XOR<chaturlUpdateManyMutationInput, chaturlUncheckedUpdateManyInput>
    /**
     * Filter which chaturls to update
     */
    where?: chaturlWhereInput
  }


  /**
   * chaturl upsert
   */
  export type chaturlUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    /**
     * The filter to search for the chaturl to update in case it exists.
     */
    where: chaturlWhereUniqueInput
    /**
     * In case the chaturl found by the `where` argument doesn't exist, create a new chaturl with this data.
     */
    create: XOR<chaturlCreateInput, chaturlUncheckedCreateInput>
    /**
     * In case the chaturl was found with the provided `where` argument, update it with this data.
     */
    update: XOR<chaturlUpdateInput, chaturlUncheckedUpdateInput>
  }


  /**
   * chaturl delete
   */
  export type chaturlDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
    /**
     * Filter which chaturl to delete.
     */
    where: chaturlWhereUniqueInput
  }


  /**
   * chaturl deleteMany
   */
  export type chaturlDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which chaturls to delete
     */
    where?: chaturlWhereInput
  }


  /**
   * chaturl.message
   */
  export type chaturl$messageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * chaturl without action
   */
  export type chaturlArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chaturl
     */
    select?: chaturlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: chaturlInclude<ExtArgs> | null
  }



  /**
   * Model message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    account_id: number | null
    bot_account_id: number | null
    chaturl_id: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    account_id: number | null
    bot_account_id: number | null
    chaturl_id: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    timestamp: Date | null
    repeating: string | null
    sent: boolean | null
    account_id: number | null
    bot_account_id: number | null
    chaturl_id: number | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    timestamp: Date | null
    repeating: string | null
    sent: boolean | null
    account_id: number | null
    bot_account_id: number | null
    chaturl_id: number | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    title: number
    content: number
    timestamp: number
    repeating: number
    sent: number
    account_id: number
    bot_account_id: number
    chaturl_id: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    account_id?: true
    bot_account_id?: true
    chaturl_id?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    account_id?: true
    bot_account_id?: true
    chaturl_id?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    timestamp?: true
    repeating?: true
    sent?: true
    account_id?: true
    bot_account_id?: true
    chaturl_id?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    timestamp?: true
    repeating?: true
    sent?: true
    account_id?: true
    bot_account_id?: true
    chaturl_id?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    timestamp?: true
    repeating?: true
    sent?: true
    account_id?: true
    bot_account_id?: true
    chaturl_id?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which message to aggregate.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
    orderBy?: Enumerable<messageOrderByWithAggregationInput>
    by: MessageScalarFieldEnum[]
    having?: messageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    id: number
    title: string | null
    content: string
    timestamp: Date
    repeating: string
    sent: boolean
    account_id: number | null
    bot_account_id: number
    chaturl_id: number | null
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type messageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    timestamp?: boolean
    repeating?: boolean
    sent?: boolean
    account_id?: boolean
    bot_account_id?: boolean
    chaturl_id?: boolean
    botaccount?: boolean | botaccountArgs<ExtArgs>
    chaturl?: boolean | chaturlArgs<ExtArgs>
    account?: boolean | accountArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type messageSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    timestamp?: boolean
    repeating?: boolean
    sent?: boolean
    account_id?: boolean
    bot_account_id?: boolean
    chaturl_id?: boolean
  }

  export type messageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    botaccount?: boolean | botaccountArgs<ExtArgs>
    chaturl?: boolean | chaturlArgs<ExtArgs>
    account?: boolean | accountArgs<ExtArgs>
  }


  type messageGetPayload<S extends boolean | null | undefined | messageArgs> = $Types.GetResult<messagePayload, S>

  type messageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<messageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface messageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['message'], meta: { name: 'message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {messageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends messageFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, messageFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'message'> extends True ? Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {messageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends messageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, messageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends messageFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, messageFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'message'> extends True ? Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends messageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, messageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends messageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, messageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<messagePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Message.
     * @param {messageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends messageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, messageCreateArgs<ExtArgs>>
    ): Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Messages.
     *     @param {messageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends messageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, messageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {messageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends messageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, messageDeleteArgs<ExtArgs>>
    ): Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Message.
     * @param {messageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends messageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, messageUpdateArgs<ExtArgs>>
    ): Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {messageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends messageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, messageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends messageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, messageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {messageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends messageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, messageUpsertArgs<ExtArgs>>
    ): Prisma__messageClient<$Types.GetResult<messagePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends messageCountArgs>(
      args?: Subset<T, messageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__messageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    botaccount<T extends botaccountArgs<ExtArgs> = {}>(args?: Subset<T, botaccountArgs<ExtArgs>>): Prisma__botaccountClient<$Types.GetResult<botaccountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    chaturl<T extends chaturlArgs<ExtArgs> = {}>(args?: Subset<T, chaturlArgs<ExtArgs>>): Prisma__chaturlClient<$Types.GetResult<chaturlPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    account<T extends accountArgs<ExtArgs> = {}>(args?: Subset<T, accountArgs<ExtArgs>>): Prisma__accountClient<$Types.GetResult<accountPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * message base type for findUnique actions
   */
  export type messageFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message findUnique
   */
  export interface messageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends messageFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * message findUniqueOrThrow
   */
  export type messageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }


  /**
   * message base type for findFirst actions
   */
  export type messageFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }

  /**
   * message findFirst
   */
  export interface messageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends messageFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * message findFirstOrThrow
   */
  export type messageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * message findMany
   */
  export type messageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: Enumerable<messageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * message create
   */
  export type messageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to create a message.
     */
    data: XOR<messageCreateInput, messageUncheckedCreateInput>
  }


  /**
   * message createMany
   */
  export type messageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many messages.
     */
    data: Enumerable<messageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * message update
   */
  export type messageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to update a message.
     */
    data: XOR<messageUpdateInput, messageUncheckedUpdateInput>
    /**
     * Choose, which message to update.
     */
    where: messageWhereUniqueInput
  }


  /**
   * message updateMany
   */
  export type messageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update messages.
     */
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     */
    where?: messageWhereInput
  }


  /**
   * message upsert
   */
  export type messageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The filter to search for the message to update in case it exists.
     */
    where: messageWhereUniqueInput
    /**
     * In case the message found by the `where` argument doesn't exist, create a new message with this data.
     */
    create: XOR<messageCreateInput, messageUncheckedCreateInput>
    /**
     * In case the message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<messageUpdateInput, messageUncheckedUpdateInput>
  }


  /**
   * message delete
   */
  export type messageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter which message to delete.
     */
    where: messageWhereUniqueInput
  }


  /**
   * message deleteMany
   */
  export type messageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which messages to delete
     */
    where?: messageWhereInput
  }


  /**
   * message without action
   */
  export type messageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: messageInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const AccountScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const BotaccountScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    cookies: 'cookies',
    account_id: 'account_id'
  };

  export type BotaccountScalarFieldEnum = (typeof BotaccountScalarFieldEnum)[keyof typeof BotaccountScalarFieldEnum]


  export const ChaturlScalarFieldEnum: {
    id: 'id',
    name: 'name',
    account_id: 'account_id'
  };

  export type ChaturlScalarFieldEnum = (typeof ChaturlScalarFieldEnum)[keyof typeof ChaturlScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const MessageScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    timestamp: 'timestamp',
    repeating: 'repeating',
    sent: 'sent',
    account_id: 'account_id',
    bot_account_id: 'bot_account_id',
    chaturl_id: 'chaturl_id'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type accountWhereInput = {
    AND?: Enumerable<accountWhereInput>
    OR?: Enumerable<accountWhereInput>
    NOT?: Enumerable<accountWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    botaccount?: BotaccountListRelationFilter
    chaturl?: ChaturlListRelationFilter
    message?: MessageListRelationFilter
  }

  export type accountOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    botaccount?: botaccountOrderByRelationAggregateInput
    chaturl?: chaturlOrderByRelationAggregateInput
    message?: messageOrderByRelationAggregateInput
  }

  export type accountWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type accountOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    _count?: accountCountOrderByAggregateInput
    _avg?: accountAvgOrderByAggregateInput
    _max?: accountMaxOrderByAggregateInput
    _min?: accountMinOrderByAggregateInput
    _sum?: accountSumOrderByAggregateInput
  }

  export type accountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<accountScalarWhereWithAggregatesInput>
    OR?: Enumerable<accountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<accountScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
  }

  export type botaccountWhereInput = {
    AND?: Enumerable<botaccountWhereInput>
    OR?: Enumerable<botaccountWhereInput>
    NOT?: Enumerable<botaccountWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    cookies?: JsonNullableFilter
    account_id?: IntNullableFilter | number | null
    account?: XOR<AccountRelationFilter, accountWhereInput> | null
    message?: MessageListRelationFilter
  }

  export type botaccountOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    cookies?: SortOrder
    account_id?: SortOrder
    account?: accountOrderByWithRelationInput
    message?: messageOrderByRelationAggregateInput
  }

  export type botaccountWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type botaccountOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    cookies?: SortOrder
    account_id?: SortOrder
    _count?: botaccountCountOrderByAggregateInput
    _avg?: botaccountAvgOrderByAggregateInput
    _max?: botaccountMaxOrderByAggregateInput
    _min?: botaccountMinOrderByAggregateInput
    _sum?: botaccountSumOrderByAggregateInput
  }

  export type botaccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<botaccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<botaccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<botaccountScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    cookies?: JsonNullableWithAggregatesFilter
    account_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type chaturlWhereInput = {
    AND?: Enumerable<chaturlWhereInput>
    OR?: Enumerable<chaturlWhereInput>
    NOT?: Enumerable<chaturlWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    account_id?: IntNullableFilter | number | null
    account?: XOR<AccountRelationFilter, accountWhereInput> | null
    message?: MessageListRelationFilter
  }

  export type chaturlOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    account_id?: SortOrder
    account?: accountOrderByWithRelationInput
    message?: messageOrderByRelationAggregateInput
  }

  export type chaturlWhereUniqueInput = {
    id?: number
  }

  export type chaturlOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    account_id?: SortOrder
    _count?: chaturlCountOrderByAggregateInput
    _avg?: chaturlAvgOrderByAggregateInput
    _max?: chaturlMaxOrderByAggregateInput
    _min?: chaturlMinOrderByAggregateInput
    _sum?: chaturlSumOrderByAggregateInput
  }

  export type chaturlScalarWhereWithAggregatesInput = {
    AND?: Enumerable<chaturlScalarWhereWithAggregatesInput>
    OR?: Enumerable<chaturlScalarWhereWithAggregatesInput>
    NOT?: Enumerable<chaturlScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    account_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type messageWhereInput = {
    AND?: Enumerable<messageWhereInput>
    OR?: Enumerable<messageWhereInput>
    NOT?: Enumerable<messageWhereInput>
    id?: IntFilter | number
    title?: StringNullableFilter | string | null
    content?: StringFilter | string
    timestamp?: DateTimeFilter | Date | string
    repeating?: StringFilter | string
    sent?: BoolFilter | boolean
    account_id?: IntNullableFilter | number | null
    bot_account_id?: IntFilter | number
    chaturl_id?: IntNullableFilter | number | null
    botaccount?: XOR<BotaccountRelationFilter, botaccountWhereInput> | null
    chaturl?: XOR<ChaturlRelationFilter, chaturlWhereInput> | null
    account?: XOR<AccountRelationFilter, accountWhereInput> | null
  }

  export type messageOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
    repeating?: SortOrder
    sent?: SortOrder
    account_id?: SortOrder
    bot_account_id?: SortOrder
    chaturl_id?: SortOrder
    botaccount?: botaccountOrderByWithRelationInput
    chaturl?: chaturlOrderByWithRelationInput
    account?: accountOrderByWithRelationInput
  }

  export type messageWhereUniqueInput = {
    id?: number
  }

  export type messageOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
    repeating?: SortOrder
    sent?: SortOrder
    account_id?: SortOrder
    bot_account_id?: SortOrder
    chaturl_id?: SortOrder
    _count?: messageCountOrderByAggregateInput
    _avg?: messageAvgOrderByAggregateInput
    _max?: messageMaxOrderByAggregateInput
    _min?: messageMinOrderByAggregateInput
    _sum?: messageSumOrderByAggregateInput
  }

  export type messageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<messageScalarWhereWithAggregatesInput>
    OR?: Enumerable<messageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<messageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringNullableWithAggregatesFilter | string | null
    content?: StringWithAggregatesFilter | string
    timestamp?: DateTimeWithAggregatesFilter | Date | string
    repeating?: StringWithAggregatesFilter | string
    sent?: BoolWithAggregatesFilter | boolean
    account_id?: IntNullableWithAggregatesFilter | number | null
    bot_account_id?: IntWithAggregatesFilter | number
    chaturl_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type accountCreateInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    botaccount?: botaccountCreateNestedManyWithoutAccountInput
    chaturl?: chaturlCreateNestedManyWithoutAccountInput
    message?: messageCreateNestedManyWithoutAccountInput
  }

  export type accountUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    botaccount?: botaccountUncheckedCreateNestedManyWithoutAccountInput
    chaturl?: chaturlUncheckedCreateNestedManyWithoutAccountInput
    message?: messageUncheckedCreateNestedManyWithoutAccountInput
  }

  export type accountUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    botaccount?: botaccountUpdateManyWithoutAccountNestedInput
    chaturl?: chaturlUpdateManyWithoutAccountNestedInput
    message?: messageUpdateManyWithoutAccountNestedInput
  }

  export type accountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    botaccount?: botaccountUncheckedUpdateManyWithoutAccountNestedInput
    chaturl?: chaturlUncheckedUpdateManyWithoutAccountNestedInput
    message?: messageUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type accountCreateManyInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
  }

  export type accountUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type accountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type botaccountCreateInput = {
    email: string
    password: string
    name: string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account?: accountCreateNestedOneWithoutBotaccountInput
    message?: messageCreateNestedManyWithoutBotaccountInput
  }

  export type botaccountUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name: string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account_id?: number | null
    message?: messageUncheckedCreateNestedManyWithoutBotaccountInput
  }

  export type botaccountUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account?: accountUpdateOneWithoutBotaccountNestedInput
    message?: messageUpdateManyWithoutBotaccountNestedInput
  }

  export type botaccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
    message?: messageUncheckedUpdateManyWithoutBotaccountNestedInput
  }

  export type botaccountCreateManyInput = {
    id?: number
    email: string
    password: string
    name: string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account_id?: number | null
  }

  export type botaccountUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cookies?: NullableJsonNullValueInput | InputJsonValue
  }

  export type botaccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type chaturlCreateInput = {
    name?: string | null
    account?: accountCreateNestedOneWithoutChaturlInput
    message?: messageCreateNestedManyWithoutChaturlInput
  }

  export type chaturlUncheckedCreateInput = {
    id?: number
    name?: string | null
    account_id?: number | null
    message?: messageUncheckedCreateNestedManyWithoutChaturlInput
  }

  export type chaturlUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    account?: accountUpdateOneWithoutChaturlNestedInput
    message?: messageUpdateManyWithoutChaturlNestedInput
  }

  export type chaturlUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
    message?: messageUncheckedUpdateManyWithoutChaturlNestedInput
  }

  export type chaturlCreateManyInput = {
    id?: number
    name?: string | null
    account_id?: number | null
  }

  export type chaturlUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type chaturlUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type messageCreateInput = {
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    botaccount?: botaccountCreateNestedOneWithoutMessageInput
    chaturl?: chaturlCreateNestedOneWithoutMessageInput
    account?: accountCreateNestedOneWithoutMessageInput
  }

  export type messageUncheckedCreateInput = {
    id?: number
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    account_id?: number | null
    bot_account_id?: number
    chaturl_id?: number | null
  }

  export type messageUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    botaccount?: botaccountUpdateOneWithoutMessageNestedInput
    chaturl?: chaturlUpdateOneWithoutMessageNestedInput
    account?: accountUpdateOneWithoutMessageNestedInput
  }

  export type messageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
    bot_account_id?: IntFieldUpdateOperationsInput | number
    chaturl_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type messageCreateManyInput = {
    id?: number
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    account_id?: number | null
    bot_account_id?: number
    chaturl_id?: number | null
  }

  export type messageUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type messageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
    bot_account_id?: IntFieldUpdateOperationsInput | number
    chaturl_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BotaccountListRelationFilter = {
    every?: botaccountWhereInput
    some?: botaccountWhereInput
    none?: botaccountWhereInput
  }

  export type ChaturlListRelationFilter = {
    every?: chaturlWhereInput
    some?: chaturlWhereInput
    none?: chaturlWhereInput
  }

  export type MessageListRelationFilter = {
    every?: messageWhereInput
    some?: messageWhereInput
    none?: messageWhereInput
  }

  export type botaccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type chaturlOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type messageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type accountCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type accountAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type accountMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type accountMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type accountSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AccountRelationFilter = {
    is?: accountWhereInput | null
    isNot?: accountWhereInput | null
  }

  export type botaccountCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    cookies?: SortOrder
    account_id?: SortOrder
  }

  export type botaccountAvgOrderByAggregateInput = {
    id?: SortOrder
    account_id?: SortOrder
  }

  export type botaccountMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    account_id?: SortOrder
  }

  export type botaccountMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    account_id?: SortOrder
  }

  export type botaccountSumOrderByAggregateInput = {
    id?: SortOrder
    account_id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type chaturlCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    account_id?: SortOrder
  }

  export type chaturlAvgOrderByAggregateInput = {
    id?: SortOrder
    account_id?: SortOrder
  }

  export type chaturlMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    account_id?: SortOrder
  }

  export type chaturlMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    account_id?: SortOrder
  }

  export type chaturlSumOrderByAggregateInput = {
    id?: SortOrder
    account_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type BotaccountRelationFilter = {
    is?: botaccountWhereInput | null
    isNot?: botaccountWhereInput | null
  }

  export type ChaturlRelationFilter = {
    is?: chaturlWhereInput | null
    isNot?: chaturlWhereInput | null
  }

  export type messageCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
    repeating?: SortOrder
    sent?: SortOrder
    account_id?: SortOrder
    bot_account_id?: SortOrder
    chaturl_id?: SortOrder
  }

  export type messageAvgOrderByAggregateInput = {
    id?: SortOrder
    account_id?: SortOrder
    bot_account_id?: SortOrder
    chaturl_id?: SortOrder
  }

  export type messageMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
    repeating?: SortOrder
    sent?: SortOrder
    account_id?: SortOrder
    bot_account_id?: SortOrder
    chaturl_id?: SortOrder
  }

  export type messageMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
    repeating?: SortOrder
    sent?: SortOrder
    account_id?: SortOrder
    bot_account_id?: SortOrder
    chaturl_id?: SortOrder
  }

  export type messageSumOrderByAggregateInput = {
    id?: SortOrder
    account_id?: SortOrder
    bot_account_id?: SortOrder
    chaturl_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type botaccountCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<botaccountCreateWithoutAccountInput>, Enumerable<botaccountUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<botaccountCreateOrConnectWithoutAccountInput>
    createMany?: botaccountCreateManyAccountInputEnvelope
    connect?: Enumerable<botaccountWhereUniqueInput>
  }

  export type chaturlCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<chaturlCreateWithoutAccountInput>, Enumerable<chaturlUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<chaturlCreateOrConnectWithoutAccountInput>
    createMany?: chaturlCreateManyAccountInputEnvelope
    connect?: Enumerable<chaturlWhereUniqueInput>
  }

  export type messageCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<messageCreateWithoutAccountInput>, Enumerable<messageUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutAccountInput>
    createMany?: messageCreateManyAccountInputEnvelope
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type botaccountUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<botaccountCreateWithoutAccountInput>, Enumerable<botaccountUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<botaccountCreateOrConnectWithoutAccountInput>
    createMany?: botaccountCreateManyAccountInputEnvelope
    connect?: Enumerable<botaccountWhereUniqueInput>
  }

  export type chaturlUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<chaturlCreateWithoutAccountInput>, Enumerable<chaturlUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<chaturlCreateOrConnectWithoutAccountInput>
    createMany?: chaturlCreateManyAccountInputEnvelope
    connect?: Enumerable<chaturlWhereUniqueInput>
  }

  export type messageUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<Enumerable<messageCreateWithoutAccountInput>, Enumerable<messageUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutAccountInput>
    createMany?: messageCreateManyAccountInputEnvelope
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type botaccountUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<botaccountCreateWithoutAccountInput>, Enumerable<botaccountUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<botaccountCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<botaccountUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: botaccountCreateManyAccountInputEnvelope
    set?: Enumerable<botaccountWhereUniqueInput>
    disconnect?: Enumerable<botaccountWhereUniqueInput>
    delete?: Enumerable<botaccountWhereUniqueInput>
    connect?: Enumerable<botaccountWhereUniqueInput>
    update?: Enumerable<botaccountUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<botaccountUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<botaccountScalarWhereInput>
  }

  export type chaturlUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<chaturlCreateWithoutAccountInput>, Enumerable<chaturlUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<chaturlCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<chaturlUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: chaturlCreateManyAccountInputEnvelope
    set?: Enumerable<chaturlWhereUniqueInput>
    disconnect?: Enumerable<chaturlWhereUniqueInput>
    delete?: Enumerable<chaturlWhereUniqueInput>
    connect?: Enumerable<chaturlWhereUniqueInput>
    update?: Enumerable<chaturlUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<chaturlUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<chaturlScalarWhereInput>
  }

  export type messageUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutAccountInput>, Enumerable<messageUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: messageCreateManyAccountInputEnvelope
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type botaccountUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<botaccountCreateWithoutAccountInput>, Enumerable<botaccountUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<botaccountCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<botaccountUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: botaccountCreateManyAccountInputEnvelope
    set?: Enumerable<botaccountWhereUniqueInput>
    disconnect?: Enumerable<botaccountWhereUniqueInput>
    delete?: Enumerable<botaccountWhereUniqueInput>
    connect?: Enumerable<botaccountWhereUniqueInput>
    update?: Enumerable<botaccountUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<botaccountUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<botaccountScalarWhereInput>
  }

  export type chaturlUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<chaturlCreateWithoutAccountInput>, Enumerable<chaturlUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<chaturlCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<chaturlUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: chaturlCreateManyAccountInputEnvelope
    set?: Enumerable<chaturlWhereUniqueInput>
    disconnect?: Enumerable<chaturlWhereUniqueInput>
    delete?: Enumerable<chaturlWhereUniqueInput>
    connect?: Enumerable<chaturlWhereUniqueInput>
    update?: Enumerable<chaturlUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<chaturlUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<chaturlScalarWhereInput>
  }

  export type messageUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutAccountInput>, Enumerable<messageUncheckedCreateWithoutAccountInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutAccountInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutAccountInput>
    createMany?: messageCreateManyAccountInputEnvelope
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutAccountInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutAccountInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type accountCreateNestedOneWithoutBotaccountInput = {
    create?: XOR<accountCreateWithoutBotaccountInput, accountUncheckedCreateWithoutBotaccountInput>
    connectOrCreate?: accountCreateOrConnectWithoutBotaccountInput
    connect?: accountWhereUniqueInput
  }

  export type messageCreateNestedManyWithoutBotaccountInput = {
    create?: XOR<Enumerable<messageCreateWithoutBotaccountInput>, Enumerable<messageUncheckedCreateWithoutBotaccountInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutBotaccountInput>
    createMany?: messageCreateManyBotaccountInputEnvelope
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type messageUncheckedCreateNestedManyWithoutBotaccountInput = {
    create?: XOR<Enumerable<messageCreateWithoutBotaccountInput>, Enumerable<messageUncheckedCreateWithoutBotaccountInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutBotaccountInput>
    createMany?: messageCreateManyBotaccountInputEnvelope
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type accountUpdateOneWithoutBotaccountNestedInput = {
    create?: XOR<accountCreateWithoutBotaccountInput, accountUncheckedCreateWithoutBotaccountInput>
    connectOrCreate?: accountCreateOrConnectWithoutBotaccountInput
    upsert?: accountUpsertWithoutBotaccountInput
    disconnect?: boolean
    delete?: boolean
    connect?: accountWhereUniqueInput
    update?: XOR<accountUpdateWithoutBotaccountInput, accountUncheckedUpdateWithoutBotaccountInput>
  }

  export type messageUpdateManyWithoutBotaccountNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutBotaccountInput>, Enumerable<messageUncheckedCreateWithoutBotaccountInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutBotaccountInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutBotaccountInput>
    createMany?: messageCreateManyBotaccountInputEnvelope
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutBotaccountInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutBotaccountInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type messageUncheckedUpdateManyWithoutBotaccountNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutBotaccountInput>, Enumerable<messageUncheckedCreateWithoutBotaccountInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutBotaccountInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutBotaccountInput>
    createMany?: messageCreateManyBotaccountInputEnvelope
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutBotaccountInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutBotaccountInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type accountCreateNestedOneWithoutChaturlInput = {
    create?: XOR<accountCreateWithoutChaturlInput, accountUncheckedCreateWithoutChaturlInput>
    connectOrCreate?: accountCreateOrConnectWithoutChaturlInput
    connect?: accountWhereUniqueInput
  }

  export type messageCreateNestedManyWithoutChaturlInput = {
    create?: XOR<Enumerable<messageCreateWithoutChaturlInput>, Enumerable<messageUncheckedCreateWithoutChaturlInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutChaturlInput>
    createMany?: messageCreateManyChaturlInputEnvelope
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type messageUncheckedCreateNestedManyWithoutChaturlInput = {
    create?: XOR<Enumerable<messageCreateWithoutChaturlInput>, Enumerable<messageUncheckedCreateWithoutChaturlInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutChaturlInput>
    createMany?: messageCreateManyChaturlInputEnvelope
    connect?: Enumerable<messageWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type accountUpdateOneWithoutChaturlNestedInput = {
    create?: XOR<accountCreateWithoutChaturlInput, accountUncheckedCreateWithoutChaturlInput>
    connectOrCreate?: accountCreateOrConnectWithoutChaturlInput
    upsert?: accountUpsertWithoutChaturlInput
    disconnect?: boolean
    delete?: boolean
    connect?: accountWhereUniqueInput
    update?: XOR<accountUpdateWithoutChaturlInput, accountUncheckedUpdateWithoutChaturlInput>
  }

  export type messageUpdateManyWithoutChaturlNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutChaturlInput>, Enumerable<messageUncheckedCreateWithoutChaturlInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutChaturlInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutChaturlInput>
    createMany?: messageCreateManyChaturlInputEnvelope
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutChaturlInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutChaturlInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type messageUncheckedUpdateManyWithoutChaturlNestedInput = {
    create?: XOR<Enumerable<messageCreateWithoutChaturlInput>, Enumerable<messageUncheckedCreateWithoutChaturlInput>>
    connectOrCreate?: Enumerable<messageCreateOrConnectWithoutChaturlInput>
    upsert?: Enumerable<messageUpsertWithWhereUniqueWithoutChaturlInput>
    createMany?: messageCreateManyChaturlInputEnvelope
    set?: Enumerable<messageWhereUniqueInput>
    disconnect?: Enumerable<messageWhereUniqueInput>
    delete?: Enumerable<messageWhereUniqueInput>
    connect?: Enumerable<messageWhereUniqueInput>
    update?: Enumerable<messageUpdateWithWhereUniqueWithoutChaturlInput>
    updateMany?: Enumerable<messageUpdateManyWithWhereWithoutChaturlInput>
    deleteMany?: Enumerable<messageScalarWhereInput>
  }

  export type botaccountCreateNestedOneWithoutMessageInput = {
    create?: XOR<botaccountCreateWithoutMessageInput, botaccountUncheckedCreateWithoutMessageInput>
    connectOrCreate?: botaccountCreateOrConnectWithoutMessageInput
    connect?: botaccountWhereUniqueInput
  }

  export type chaturlCreateNestedOneWithoutMessageInput = {
    create?: XOR<chaturlCreateWithoutMessageInput, chaturlUncheckedCreateWithoutMessageInput>
    connectOrCreate?: chaturlCreateOrConnectWithoutMessageInput
    connect?: chaturlWhereUniqueInput
  }

  export type accountCreateNestedOneWithoutMessageInput = {
    create?: XOR<accountCreateWithoutMessageInput, accountUncheckedCreateWithoutMessageInput>
    connectOrCreate?: accountCreateOrConnectWithoutMessageInput
    connect?: accountWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type botaccountUpdateOneWithoutMessageNestedInput = {
    create?: XOR<botaccountCreateWithoutMessageInput, botaccountUncheckedCreateWithoutMessageInput>
    connectOrCreate?: botaccountCreateOrConnectWithoutMessageInput
    upsert?: botaccountUpsertWithoutMessageInput
    disconnect?: boolean
    delete?: boolean
    connect?: botaccountWhereUniqueInput
    update?: XOR<botaccountUpdateWithoutMessageInput, botaccountUncheckedUpdateWithoutMessageInput>
  }

  export type chaturlUpdateOneWithoutMessageNestedInput = {
    create?: XOR<chaturlCreateWithoutMessageInput, chaturlUncheckedCreateWithoutMessageInput>
    connectOrCreate?: chaturlCreateOrConnectWithoutMessageInput
    upsert?: chaturlUpsertWithoutMessageInput
    disconnect?: boolean
    delete?: boolean
    connect?: chaturlWhereUniqueInput
    update?: XOR<chaturlUpdateWithoutMessageInput, chaturlUncheckedUpdateWithoutMessageInput>
  }

  export type accountUpdateOneWithoutMessageNestedInput = {
    create?: XOR<accountCreateWithoutMessageInput, accountUncheckedCreateWithoutMessageInput>
    connectOrCreate?: accountCreateOrConnectWithoutMessageInput
    upsert?: accountUpsertWithoutMessageInput
    disconnect?: boolean
    delete?: boolean
    connect?: accountWhereUniqueInput
    update?: XOR<accountUpdateWithoutMessageInput, accountUncheckedUpdateWithoutMessageInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type botaccountCreateWithoutAccountInput = {
    email: string
    password: string
    name: string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    message?: messageCreateNestedManyWithoutBotaccountInput
  }

  export type botaccountUncheckedCreateWithoutAccountInput = {
    id?: number
    email: string
    password: string
    name: string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    message?: messageUncheckedCreateNestedManyWithoutBotaccountInput
  }

  export type botaccountCreateOrConnectWithoutAccountInput = {
    where: botaccountWhereUniqueInput
    create: XOR<botaccountCreateWithoutAccountInput, botaccountUncheckedCreateWithoutAccountInput>
  }

  export type botaccountCreateManyAccountInputEnvelope = {
    data: Enumerable<botaccountCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type chaturlCreateWithoutAccountInput = {
    name?: string | null
    message?: messageCreateNestedManyWithoutChaturlInput
  }

  export type chaturlUncheckedCreateWithoutAccountInput = {
    id?: number
    name?: string | null
    message?: messageUncheckedCreateNestedManyWithoutChaturlInput
  }

  export type chaturlCreateOrConnectWithoutAccountInput = {
    where: chaturlWhereUniqueInput
    create: XOR<chaturlCreateWithoutAccountInput, chaturlUncheckedCreateWithoutAccountInput>
  }

  export type chaturlCreateManyAccountInputEnvelope = {
    data: Enumerable<chaturlCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type messageCreateWithoutAccountInput = {
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    botaccount?: botaccountCreateNestedOneWithoutMessageInput
    chaturl?: chaturlCreateNestedOneWithoutMessageInput
  }

  export type messageUncheckedCreateWithoutAccountInput = {
    id?: number
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    bot_account_id?: number
    chaturl_id?: number | null
  }

  export type messageCreateOrConnectWithoutAccountInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutAccountInput, messageUncheckedCreateWithoutAccountInput>
  }

  export type messageCreateManyAccountInputEnvelope = {
    data: Enumerable<messageCreateManyAccountInput>
    skipDuplicates?: boolean
  }

  export type botaccountUpsertWithWhereUniqueWithoutAccountInput = {
    where: botaccountWhereUniqueInput
    update: XOR<botaccountUpdateWithoutAccountInput, botaccountUncheckedUpdateWithoutAccountInput>
    create: XOR<botaccountCreateWithoutAccountInput, botaccountUncheckedCreateWithoutAccountInput>
  }

  export type botaccountUpdateWithWhereUniqueWithoutAccountInput = {
    where: botaccountWhereUniqueInput
    data: XOR<botaccountUpdateWithoutAccountInput, botaccountUncheckedUpdateWithoutAccountInput>
  }

  export type botaccountUpdateManyWithWhereWithoutAccountInput = {
    where: botaccountScalarWhereInput
    data: XOR<botaccountUpdateManyMutationInput, botaccountUncheckedUpdateManyWithoutBotaccountInput>
  }

  export type botaccountScalarWhereInput = {
    AND?: Enumerable<botaccountScalarWhereInput>
    OR?: Enumerable<botaccountScalarWhereInput>
    NOT?: Enumerable<botaccountScalarWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    name?: StringFilter | string
    cookies?: JsonNullableFilter
    account_id?: IntNullableFilter | number | null
  }

  export type chaturlUpsertWithWhereUniqueWithoutAccountInput = {
    where: chaturlWhereUniqueInput
    update: XOR<chaturlUpdateWithoutAccountInput, chaturlUncheckedUpdateWithoutAccountInput>
    create: XOR<chaturlCreateWithoutAccountInput, chaturlUncheckedCreateWithoutAccountInput>
  }

  export type chaturlUpdateWithWhereUniqueWithoutAccountInput = {
    where: chaturlWhereUniqueInput
    data: XOR<chaturlUpdateWithoutAccountInput, chaturlUncheckedUpdateWithoutAccountInput>
  }

  export type chaturlUpdateManyWithWhereWithoutAccountInput = {
    where: chaturlScalarWhereInput
    data: XOR<chaturlUpdateManyMutationInput, chaturlUncheckedUpdateManyWithoutChaturlInput>
  }

  export type chaturlScalarWhereInput = {
    AND?: Enumerable<chaturlScalarWhereInput>
    OR?: Enumerable<chaturlScalarWhereInput>
    NOT?: Enumerable<chaturlScalarWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    account_id?: IntNullableFilter | number | null
  }

  export type messageUpsertWithWhereUniqueWithoutAccountInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutAccountInput, messageUncheckedUpdateWithoutAccountInput>
    create: XOR<messageCreateWithoutAccountInput, messageUncheckedCreateWithoutAccountInput>
  }

  export type messageUpdateWithWhereUniqueWithoutAccountInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutAccountInput, messageUncheckedUpdateWithoutAccountInput>
  }

  export type messageUpdateManyWithWhereWithoutAccountInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutMessageInput>
  }

  export type messageScalarWhereInput = {
    AND?: Enumerable<messageScalarWhereInput>
    OR?: Enumerable<messageScalarWhereInput>
    NOT?: Enumerable<messageScalarWhereInput>
    id?: IntFilter | number
    title?: StringNullableFilter | string | null
    content?: StringFilter | string
    timestamp?: DateTimeFilter | Date | string
    repeating?: StringFilter | string
    sent?: BoolFilter | boolean
    account_id?: IntNullableFilter | number | null
    bot_account_id?: IntFilter | number
    chaturl_id?: IntNullableFilter | number | null
  }

  export type accountCreateWithoutBotaccountInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    chaturl?: chaturlCreateNestedManyWithoutAccountInput
    message?: messageCreateNestedManyWithoutAccountInput
  }

  export type accountUncheckedCreateWithoutBotaccountInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    chaturl?: chaturlUncheckedCreateNestedManyWithoutAccountInput
    message?: messageUncheckedCreateNestedManyWithoutAccountInput
  }

  export type accountCreateOrConnectWithoutBotaccountInput = {
    where: accountWhereUniqueInput
    create: XOR<accountCreateWithoutBotaccountInput, accountUncheckedCreateWithoutBotaccountInput>
  }

  export type messageCreateWithoutBotaccountInput = {
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    chaturl?: chaturlCreateNestedOneWithoutMessageInput
    account?: accountCreateNestedOneWithoutMessageInput
  }

  export type messageUncheckedCreateWithoutBotaccountInput = {
    id?: number
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    account_id?: number | null
    chaturl_id?: number | null
  }

  export type messageCreateOrConnectWithoutBotaccountInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutBotaccountInput, messageUncheckedCreateWithoutBotaccountInput>
  }

  export type messageCreateManyBotaccountInputEnvelope = {
    data: Enumerable<messageCreateManyBotaccountInput>
    skipDuplicates?: boolean
  }

  export type accountUpsertWithoutBotaccountInput = {
    update: XOR<accountUpdateWithoutBotaccountInput, accountUncheckedUpdateWithoutBotaccountInput>
    create: XOR<accountCreateWithoutBotaccountInput, accountUncheckedCreateWithoutBotaccountInput>
  }

  export type accountUpdateWithoutBotaccountInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    chaturl?: chaturlUpdateManyWithoutAccountNestedInput
    message?: messageUpdateManyWithoutAccountNestedInput
  }

  export type accountUncheckedUpdateWithoutBotaccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    chaturl?: chaturlUncheckedUpdateManyWithoutAccountNestedInput
    message?: messageUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type messageUpsertWithWhereUniqueWithoutBotaccountInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutBotaccountInput, messageUncheckedUpdateWithoutBotaccountInput>
    create: XOR<messageCreateWithoutBotaccountInput, messageUncheckedCreateWithoutBotaccountInput>
  }

  export type messageUpdateWithWhereUniqueWithoutBotaccountInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutBotaccountInput, messageUncheckedUpdateWithoutBotaccountInput>
  }

  export type messageUpdateManyWithWhereWithoutBotaccountInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutMessageInput>
  }

  export type accountCreateWithoutChaturlInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    botaccount?: botaccountCreateNestedManyWithoutAccountInput
    message?: messageCreateNestedManyWithoutAccountInput
  }

  export type accountUncheckedCreateWithoutChaturlInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    botaccount?: botaccountUncheckedCreateNestedManyWithoutAccountInput
    message?: messageUncheckedCreateNestedManyWithoutAccountInput
  }

  export type accountCreateOrConnectWithoutChaturlInput = {
    where: accountWhereUniqueInput
    create: XOR<accountCreateWithoutChaturlInput, accountUncheckedCreateWithoutChaturlInput>
  }

  export type messageCreateWithoutChaturlInput = {
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    botaccount?: botaccountCreateNestedOneWithoutMessageInput
    account?: accountCreateNestedOneWithoutMessageInput
  }

  export type messageUncheckedCreateWithoutChaturlInput = {
    id?: number
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    account_id?: number | null
    bot_account_id?: number
  }

  export type messageCreateOrConnectWithoutChaturlInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutChaturlInput, messageUncheckedCreateWithoutChaturlInput>
  }

  export type messageCreateManyChaturlInputEnvelope = {
    data: Enumerable<messageCreateManyChaturlInput>
    skipDuplicates?: boolean
  }

  export type accountUpsertWithoutChaturlInput = {
    update: XOR<accountUpdateWithoutChaturlInput, accountUncheckedUpdateWithoutChaturlInput>
    create: XOR<accountCreateWithoutChaturlInput, accountUncheckedCreateWithoutChaturlInput>
  }

  export type accountUpdateWithoutChaturlInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    botaccount?: botaccountUpdateManyWithoutAccountNestedInput
    message?: messageUpdateManyWithoutAccountNestedInput
  }

  export type accountUncheckedUpdateWithoutChaturlInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    botaccount?: botaccountUncheckedUpdateManyWithoutAccountNestedInput
    message?: messageUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type messageUpsertWithWhereUniqueWithoutChaturlInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutChaturlInput, messageUncheckedUpdateWithoutChaturlInput>
    create: XOR<messageCreateWithoutChaturlInput, messageUncheckedCreateWithoutChaturlInput>
  }

  export type messageUpdateWithWhereUniqueWithoutChaturlInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutChaturlInput, messageUncheckedUpdateWithoutChaturlInput>
  }

  export type messageUpdateManyWithWhereWithoutChaturlInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutMessageInput>
  }

  export type botaccountCreateWithoutMessageInput = {
    email: string
    password: string
    name: string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account?: accountCreateNestedOneWithoutBotaccountInput
  }

  export type botaccountUncheckedCreateWithoutMessageInput = {
    id?: number
    email: string
    password: string
    name: string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account_id?: number | null
  }

  export type botaccountCreateOrConnectWithoutMessageInput = {
    where: botaccountWhereUniqueInput
    create: XOR<botaccountCreateWithoutMessageInput, botaccountUncheckedCreateWithoutMessageInput>
  }

  export type chaturlCreateWithoutMessageInput = {
    name?: string | null
    account?: accountCreateNestedOneWithoutChaturlInput
  }

  export type chaturlUncheckedCreateWithoutMessageInput = {
    id?: number
    name?: string | null
    account_id?: number | null
  }

  export type chaturlCreateOrConnectWithoutMessageInput = {
    where: chaturlWhereUniqueInput
    create: XOR<chaturlCreateWithoutMessageInput, chaturlUncheckedCreateWithoutMessageInput>
  }

  export type accountCreateWithoutMessageInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    botaccount?: botaccountCreateNestedManyWithoutAccountInput
    chaturl?: chaturlCreateNestedManyWithoutAccountInput
  }

  export type accountUncheckedCreateWithoutMessageInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    botaccount?: botaccountUncheckedCreateNestedManyWithoutAccountInput
    chaturl?: chaturlUncheckedCreateNestedManyWithoutAccountInput
  }

  export type accountCreateOrConnectWithoutMessageInput = {
    where: accountWhereUniqueInput
    create: XOR<accountCreateWithoutMessageInput, accountUncheckedCreateWithoutMessageInput>
  }

  export type botaccountUpsertWithoutMessageInput = {
    update: XOR<botaccountUpdateWithoutMessageInput, botaccountUncheckedUpdateWithoutMessageInput>
    create: XOR<botaccountCreateWithoutMessageInput, botaccountUncheckedCreateWithoutMessageInput>
  }

  export type botaccountUpdateWithoutMessageInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account?: accountUpdateOneWithoutBotaccountNestedInput
  }

  export type botaccountUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type chaturlUpsertWithoutMessageInput = {
    update: XOR<chaturlUpdateWithoutMessageInput, chaturlUncheckedUpdateWithoutMessageInput>
    create: XOR<chaturlCreateWithoutMessageInput, chaturlUncheckedCreateWithoutMessageInput>
  }

  export type chaturlUpdateWithoutMessageInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    account?: accountUpdateOneWithoutChaturlNestedInput
  }

  export type chaturlUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type accountUpsertWithoutMessageInput = {
    update: XOR<accountUpdateWithoutMessageInput, accountUncheckedUpdateWithoutMessageInput>
    create: XOR<accountCreateWithoutMessageInput, accountUncheckedCreateWithoutMessageInput>
  }

  export type accountUpdateWithoutMessageInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    botaccount?: botaccountUpdateManyWithoutAccountNestedInput
    chaturl?: chaturlUpdateManyWithoutAccountNestedInput
  }

  export type accountUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    botaccount?: botaccountUncheckedUpdateManyWithoutAccountNestedInput
    chaturl?: chaturlUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type botaccountCreateManyAccountInput = {
    id?: number
    email: string
    password: string
    name: string
    cookies?: NullableJsonNullValueInput | InputJsonValue
  }

  export type chaturlCreateManyAccountInput = {
    id?: number
    name?: string | null
  }

  export type messageCreateManyAccountInput = {
    id?: number
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    bot_account_id?: number
    chaturl_id?: number | null
  }

  export type botaccountUpdateWithoutAccountInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    message?: messageUpdateManyWithoutBotaccountNestedInput
  }

  export type botaccountUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cookies?: NullableJsonNullValueInput | InputJsonValue
    message?: messageUncheckedUpdateManyWithoutBotaccountNestedInput
  }

  export type botaccountUncheckedUpdateManyWithoutBotaccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cookies?: NullableJsonNullValueInput | InputJsonValue
  }

  export type chaturlUpdateWithoutAccountInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    message?: messageUpdateManyWithoutChaturlNestedInput
  }

  export type chaturlUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    message?: messageUncheckedUpdateManyWithoutChaturlNestedInput
  }

  export type chaturlUncheckedUpdateManyWithoutChaturlInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type messageUpdateWithoutAccountInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    botaccount?: botaccountUpdateOneWithoutMessageNestedInput
    chaturl?: chaturlUpdateOneWithoutMessageNestedInput
  }

  export type messageUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    bot_account_id?: IntFieldUpdateOperationsInput | number
    chaturl_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type messageUncheckedUpdateManyWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    bot_account_id?: IntFieldUpdateOperationsInput | number
    chaturl_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type messageCreateManyBotaccountInput = {
    id?: number
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    account_id?: number | null
    chaturl_id?: number | null
  }

  export type messageUpdateWithoutBotaccountInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    chaturl?: chaturlUpdateOneWithoutMessageNestedInput
    account?: accountUpdateOneWithoutMessageNestedInput
  }

  export type messageUncheckedUpdateWithoutBotaccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
    chaturl_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type messageCreateManyChaturlInput = {
    id?: number
    title?: string | null
    content: string
    timestamp?: Date | string
    repeating?: string
    sent?: boolean
    account_id?: number | null
    bot_account_id?: number
  }

  export type messageUpdateWithoutChaturlInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    botaccount?: botaccountUpdateOneWithoutMessageNestedInput
    account?: accountUpdateOneWithoutMessageNestedInput
  }

  export type messageUncheckedUpdateWithoutChaturlInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    repeating?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    account_id?: NullableIntFieldUpdateOperationsInput | number | null
    bot_account_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}