generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Role {
//   id   Int    @id @default(autoincrement())
//   name String @db.VarChar(25)
//   users User[]
// }

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(50)
  password  String
  firstName String    @db.VarChar(25)
  lastName  String    @db.VarChar(25)
  bots      Bot[]
  chatUrls  ChatUrl[]
  tasks     Task[]
  // role_id   Int       @default(1)
  // role      Role      @relation(fields: [role_id], references: [id], map: "fk_user_role")
}

model Task {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  title      String   @db.VarChar(100)
  content    String   @db.Text
  remindTime DateTime @default(now())
  recurring  String   @default("Does not repeat") @db.VarChar(50)
  sent       Boolean  @default(false)
  user_id    Int?
  user       User?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_task_user")
  bot_id     Int?     @default(0)
  bot        Bot?     @relation(fields: [bot_id], references: [id], map: "fk_task_bot")
  chatUrl_id Int?     
  chatUrl    ChatUrl? @relation(fields: [chatUrl_id], references: [id], map: "fk_task_chatUrl")
}

model ChatUrl {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(25)
  url     String @db.VarChar(100)
  user_id Int?
  user    User?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chatUrl_user")
  task    Task[]
}

model Bot {
  id       Int    @id @default(autoincrement())
  email    String @db.VarChar(50)
  password String @db.VarChar(50)
  name     String @db.VarChar(25)
  cookies  Json?
  user_id  Int?
  user     User?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bot_user")
  task     Task[]
}

// model account {
//   id         Int          @id @default(autoincrement())
//   email      String       @unique @db.VarChar(50)
//   password   String
//   firstName  String       @db.VarChar(25)
//   lastName   String       @db.VarChar(25)
//   botaccount botaccount[]
//   chaturl    chaturl[]
//   message    message[]
// }

// model botaccount {
//   id       Int       @id @default(autoincrement())
//   email    String    @db.VarChar(50)
//   password String
//   name     String    @db.VarChar(25) @unique
//   cookies  Json?
//   account_id  Int?
//   account     account?     @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account")
//   message  message[]
// }

// model chaturl {
//   id      Int       @id @default(autoincrement())
//   name    String?   @db.VarChar(50)
//   account_id Int?
//   account    account?     @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account")
//   message message[]
// }

// model message {
//   id             Int         @id @default(autoincrement())
//   title          String?     @db.VarChar(50)
//   content        String
//   timestamp      DateTime   @default(now()) @db.Timestamp(6)
//   repeating      String     @default("Does not repeat")
//   sent           Boolean     @default(false)
//   account_id        Int?
//   bot_account_id Int        @default(1)
//   chaturl_id     Int?
//   botaccount     botaccount? @relation(fields: [bot_account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_botaccount")
//   chaturl        chaturl?    @relation(fields: [chaturl_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chaturl")
//   account           account?       @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account")
// }
